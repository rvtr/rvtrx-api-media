env:
  CACHE_KEY_PREFIX: aspnet-media
  WORKING_DIRECTORY: aspnet

jobs:
  restore:
    name: restore_aspnet
    runs-on: ubuntu-20.04
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.3.4
      - name: dotnet_cache
        uses: actions/cache@v2.1.4
        with:
          path: ~/.nuget/packages
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/packages.lock.json') }}
      - name: dotnet_restore
        run: dotnet restore
        working-directory: ${{ env.WORKING_DIRECTORY }}

  build:
    name: build_aspnet
    needs: restore
    runs-on: ubuntu-20.04
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.3.4
      - name: dotnet_cache
        uses: actions/cache@v2.1.4
        with:
          path: ~/.nuget/packages
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/packages.lock.json') }}
      - name: dotnet_build
        run: dotnet build
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - if: startsWith(github.ref, 'refs/heads/main')
        name: dotnet_publish_head
        run: dotnet publish --configuration Debug --output drop RVTR.Media.Service/*.csproj
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - if: startsWith(github.ref, 'refs/tags/')
        name: dotnet_publish
        run: dotnet publish --configuration Release --output drop RVTR.Media.Service/*.csproj
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: drop_upload
        uses: actions/upload-artifact@v2
        with:
          name: drop
          path: ${{ env.WORKING_DIRECTORY }}/drop

  test:
    name: test_aspnet
    needs: restore
    runs-on: ubuntu-20.04
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.3.4
      - name: dotnet_cache
        uses: actions/cache@v2.1.4
        with:
          path: ~/.nuget/packages
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/packages.lock.json') }}
      - name: dotnet_test
        run: |
          dotnet test \
          -p:CollectCoverage=true \
          -p:CoverletOutput=../code_coverage/ \
          -p:CoverletOutputFormat=opencover \
          --logger trx \
          --results-directory ./test_coverage/
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: opencover_upload
        uses: actions/upload-artifact@v2
        with:
          name: code_coverage
          path: ${{ env.WORKING_DIRECTORY }}/code_coverage
      - name: trx_upload
        uses: actions/upload-artifact@v2
        with:
          name: test_coverage
          path: ${{ env.WORKING_DIRECTORY }}/test_coverage

  analyze:
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    name: analyze_aspnet
    needs: [build, test]
    runs-on: ubuntu-20.04
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.3.4
      - name: git_fetch
        run: git fetch --unshallow
      - name: opencover_download
        uses: actions/download-artifact@v2
        with:
          name: code_coverage
          path: ${{ env.WORKING_DIRECTORY }}/code_coverage
      - name: trx_download
        uses: actions/download-artifact@v2
        with:
          name: test_coverage
          path: ${{ env.WORKING_DIRECTORY }}/test_coverage
      - name: sonar_install
        run: dotnet tool install --global dotnet-sonarscanner
      - name: dotnet_cache
        uses: actions/cache@v2.1.4
        with:
          path: ~/.nuget/packages
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/packages.lock.json') }}
      - name: sonar_scan
        run: |
          dotnet sonarscanner begin -k:rvtr_api_media -o:rvtr -s:$(pwd)/sonar.analysis.xml
          dotnet build
          dotnet sonarscanner end
        working-directory: ${{ env.WORKING_DIRECTORY }}

  pack:
    env:
      REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
    name: pack_aspnet
    needs: [analyze]
    runs-on: ubuntu-20.04
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.3.4
      - name: drop_download
        uses: actions/download-artifact@v2
        with:
          name: drop
          path: drop
      - name: docker_login
        run: echo ${REGISTRY_TOKEN} | docker login --username ${GITHUB_ACTOR} --password-stdin ghcr.io
      - name: docker_build
        run: docker image build --file .docker/pipeline.dockerfile --tag media drop
      - if: startsWith(github.ref, 'refs/heads/main')
        name: docker_push_head
        run: |
          docker image tag media ghcr.io/rvtr/rvtrx-api-media:main-aspnet-rest
          docker image push ghcr.io/rvtr/rvtrx-api-media:main-aspnet-rest
      - if: startsWith(github.ref, 'refs/tags/')
        name: docker_push
        run: |
          docker image tag media ghcr.io/rvtr/rvtrx-api-media:aspnet-rest
          docker image push ghcr.io/rvtr/rvtrx-api-media:aspnet-rest
      - name: docker_logout
        run: docker logout

  deploy:
    needs: pack
    runs-on: ubuntu-20.04
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.3.4
      - name: az_login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: az_webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: campgroundmediaapi
          configuration-file: .docker/pipeline_compose.yaml

name: release

on:
  push:
    branches:
      - main
    tags:
      - '*'
